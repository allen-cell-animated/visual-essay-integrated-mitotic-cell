html {
    /* Overwritten in `src/index.tsx` to pin to window.innerHeight */
    --viewport-height: 100vh;

    /* EVERYTHING is based on this. These are overwritten in `src/index.tsx`. */
    --video-height: calc((9 / 16) * 100vw);
    --video-width: 100vw;

    /* sizing relative to video */
    --gutter: calc(0.01611 * var(--video-width));
    --header-height: calc(0.1171875 * var(--video-height));

    --one-column-body-width: calc(var(--video-width) - (2 * var(--gutter)));
    --one-column-body-height: calc(0.1536 * var(--video-height));

    --two-column-body-width: calc(0.3119 * var(--video-width));
    --two-column-body-height: calc(var(--video-height) - var(--header-height) - var(--gutter));

    --empty-space-background-color: #0a0a0a;
    --background-color: #141414;

    /* responsive typography locks */
    --min-font: 8px; /* this is used, somewhat arbitrarily, as part of a y-intercept calculation for the scaling function */
    --max-font: 22px;
    --min-vw: 568px;
    --max-vw: 1366px;
    --min-vh: 320px;
    --max-vh: 768px;

    box-sizing: border-box;
}

*, *:before, *:after {
    box-sizing: inherit;
}

html, body {
    background-color: var(--empty-space-background-color);
    position: fixed;
}

html, body, main {
    width: 100vw;
    height: var(--viewport-height);
    margin: 0;
    padding: 0;
    border: 0;
    overflow: hidden;
}

body {
    /* prevent rubberbanding */
    overscroll-behavior-y: none;

    /* just, don't do anything */
    touch-action: none;
}

main {
    position: relative;
    font-family: 'Overpass', sans-serif;
    line-height: normal;
    letter-spacing: normal;
    font-stretch: normal;
}

.wrapper {
    background-color: var(--background-color);
    height: var(--video-height);
    width: var(--video-width);
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

/*
 * ---- RESPONSIVE TYPOGRAPHY ----
 *
 * The smallest dimension of the video controls the sizing of the font. E.g., when the height is greater than the width,
 * the width controls the font-size. This is intended to set 1em within this parent container. All child element
 * font-sizes should be based on rem to take advantage of these calculations.
 *
 * Additionally, **any** size property that can accept rem units can be set by these same calculations. E.g., an element's
 * height, width, absolute position, etc. Note that we are using `rem` based units instead of `em` to avoid the cascading
 * nature of em.
 *
 * For example, if a design mockup (with dimensions 1366 x 768) has a font-size for an element pegged to 34px it should
 * be sized in this application according to the following steps:
 *      1. determine some base unit within that design (i.e., determine what "1em" equals in that design)
 *      2. divide font-size for that element within the design by the base unit.
 * In this example, following those instructions leads to the font-size for the element should be set to 1.54rem (~ 34 / 22).
 *
 * Adapted from general fluid typography formula:
 * calc([minimum font size with unit] + ([maximum font size] - [minimum font size]) * ((100v(w|h) - [minimum viewport dimension with unit]) / ([maximum viewport dimension] - [minimum viewport dimension])));
 *
 * Reference:
 * https://fvsch.com/css-locks/
 */

/* in portrait mode, the video width determines the root font-size */
@media (orientation: portrait) {
    html {
        font-size: calc(var(--min-font) + (22 - 8) * (var(--video-width) - var(--min-vw)) / (1366 - 568));
    }
}

@media (orientation: portrait) and (min-width: var(--max-vw)) {
    html {
        font-size: var(--max-font);
    }
}

/* in landscape mode, the video height determines the root font-size */
@media (orientation: landscape) {
    html {
        font-size: calc(var(--min-font) + (22 - 8) * (var(--video-height) - var(--min-vh)) / (768 - 320));
    }
}

@media (orientation: landscape) and (min-height: var(--max-vh)) {
    html {
        font-size: var(--max-font);
    }
}
