/**
 *  LAYOUT
 */
.section {
    --background-color: #1e1e1e;
    --font-color: #c3c3c3;
    --font-weight: 300;

    position: absolute;
    background: var(--background-color);
    padding: 0 var(--gutter);
    overflow-y: hidden;
    color: var(--font-color);
    font-weight: var(--font-weight);
    font-size: 1rem; /* 22 / 22 */
    line-height: 1.35;
}

.container {
    position: relative;
    height: 100%;
    width: 100%;
}

.gradient {
    position: absolute;
    height: 3rem;
    width: 100%;
}

.gradient-top {
    composes: gradient;
    top: 0;
    background: linear-gradient(to bottom, #1e1e1eff, #1e1e1e00);
}

.gradient-bottom {
    composes: gradient;
    bottom: 0;
    background: linear-gradient(to top, #1e1e1eff, #1e1e1e00);
}

.content {
    position: absolute;
}

.content p:last-of-type {
    margin-bottom: 0;
}

.two-column-layout {
    height: var(--two-column-body-height);
    width: var(--two-column-body-width);

    /* tether to right edge of video, which is horizontally centered in the page */
    --video-right-edge: calc(50% + var(--video-width) / 2);
    left: calc(var(--video-right-edge) - var(--gutter)); /* push all the way to the right edge of the video, minus gutter */
    transform: translateX(-100%); /* pull back in 100% of content width to accomplish tethering to right edge of video */
}

.one-column-layout {
    width: var(--one-column-body-width);
    height: var(--one-column-body-height);
    left: 50%;
    transform: translateX(-50%);
}

/* hide gradient in one-column layout; no text stacking allowed */
.one-column-layout .gradient {
    display: none;
}

.inline-video {
    display: block;
    width: 100%;
    object-fit: contain;
    object-position: center center;
    margin-bottom: 0.5rem;
}

.inline-image {
    width: 100%;
    margin-bottom: 0.25rem;
}

.inline-media-caption {
    font-size: 73%;
    padding: 0 0 0 1rem;
}

.inline-media-container {
    margin: 1rem 0 0 0;
}

/**
 *  SECTION (GRAY BOX) ANIMATIONS
 *
 *  Supported:
 *     "push" - New section slides in as old section slides out.
 */
.section {
    transition: top 0.7s ease-in;
}

.section.exiting-up,
.section.exited {
    top: -100vh;
}

.section.entering-up,
.section.entering-down,
.section.entered {
    top: var(--header-height);
}

.section.exiting-down,
.section.initial {
    top: 100vh;
}


/**
 *  CONTENT (TEXT, ETC.) ANIMATIONS
 *
 *  Supported:
 *      "push": New content slides in, old content slides out
 *      "stack": Upcoming content pokes head above bottom of container, then slides into place; old content shows tail hanging from top of container.
 *      "fade": New content fades in as old content fades out (cross-fade)
 */
.content {
    transition: top 0.3s ease-in, opacity 1s ease-in, transform 0.3s ease-out;
}

.content.initial:not(.prev-sibling-in-view),
.content.exited:not(.next-sibling-in-view) {
    visibility: hidden;
}

/* ---- PUSH (default) ---- */
.push.exiting-up,
.push.exited {
    top: 0; /* above viewport once transform is applied */
    transform: translateY(-100%);
}

.push.entering-down,
.push.entering-up,
.push.entered {
    /* vertical centering */
    top: 50%; /* push top to middle of its container */
    transform: translateY(-50%); /* nudge up 50% of content height to accomplish vertical centering */
}

.push.exiting-down,
.push.initial {
    top: 100%; /* below viewport */
    transform: translateY(0);
}


/*
 * ---- STACK ----
 *
 * Only ever show 2em worth of content. This is coordinated with the size of the gradients
 * that sit on top of the stacked content.
 */
.stack.exited {
    top: -50%;
}

.stack.exiting-up,
.stack.exited {
    transform: translateY(-100%);
}

.stack.exiting-up.next-sibling-in-view,
.stack.exited.next-sibling-in-view {
    top: 0;
}

.stack.exited.next-sibling-in-view {
    transform: translateY(calc(-100% + 2rem));
}

.stack.exiting-up,
.stack.entering-down,
.stack.entering-up,
.stack.exiting-down,
.stack.entered {
    transform: translateY(-50%);
}

.stack.entering-down,
.stack.entering-up,
.stack.entered {
    top: 50%; /* push top to middle of its container */
}

.stack.exiting-down.prev-sibling-in-view,
.stack.initial.prev-sibling-in-view {
    top: 100%;
}

.stack.initial.prev-sibling-in-view {
    transform: translateY(-2rem);
}

.stack.exiting-down,
.stack.initial {
    top: 150%; /* below viewport */
}

.stack.initial {
    transform: translateY(0);
}

/* ---- FADE ---- */
.fade {
    /* vertical centering */
    top: 50%; /* push top to middle of its container */
    transform: translateY(-50%); /* nudge up 50% of content height to accomplish vertical centering */
}

.fade.entering-down,
.fade.entering-up,
.fade.exiting-up,
.fade.exited,
.fade.initial {
    opacity: 0;
}

.fade.entered {
    opacity: 1;
}
